!function(e){var n={};function t(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(o,i,function(n){return e[n]}.bind(null,i));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=1)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.DaliTree=void 0;var o,i=t(4),r=(o=i)&&o.__esModule?o:{default:o};t(2),n.DaliTree=r.default},function(e,n,t){(e.exports=t(3)(!1)).push([e.i,'@font-face {\n  font-family: "iconfont";\n  src: url(\'data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAOoAAsAAAAACCwAAANZAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCDGgqDRIJ3ATYCJAMUCwwABCAFhG0HZhsJBxFVnCfIfiRUPB66zSYvyJ0XOa1qdSy+CeJT99g+gb8iB4C5SheFCCsk6K67GTdAAAHeo7nhEsqFNIureNU6vZ/47YZ1WiYlQiRELg7HLZuA84FymXtQF8VxQAHuhdEWLpBEPRXwbCb8g30eAnjyK0uaNm/bFYfBmCaAjB01YhAupcbU5AoOISpZa5ClWJyap+4AS/zvy28q50BhNcZFHYc3G0rDb/ab0yEJ+upAGO8yAAtooCwwIL1LzV3RYbgsjdfChpJY1zCBby5J+GZd9mr/8MCgUQhIhJGdFoCGiBj4Zm12LImgREOSghIFiQP3/M+yAHggBgKwHgNblFCZiQadMWs3I24/SmuMHWDWnS2WYc/5PHb9ueLpd57puuP5LsPVp4VMOHjmhE8//9S5wzKk3ojuQ7t37V32rq1P1umvPStsdzw3tpyvkeHo2Xxm45mq6Y+dyz/ArFqVLcOaNTns6tXZ069c2Wv+/mkH4nQL9oW9vnvI8BUoMPIXSx8yyOQMJn3/KFMq49TzwVfZGrZW8UxBw9y2ZcuOoaOTaEOu8utPufi5n5qWz1U7svVOMKpXrwzp58wmTYOflQ3NmOEwmn3V/yreqfhP3/EXF0xUg9t33LpwJ9+fupPaP5HKDixKlynvfLze7f7zJ1HI/ztbR607lFhvzG31uXx5WapNASC5oM32hj75mj6la0d/6rU65+f7Dfd3VGMHZKj7n4sNAK8z75gJV3LB0C8Dh4LWnI/FadlmdJ6hsUZtttmqxVIzMR0FeDyQYNgzezeONRtio+BEDkCRIh9oHEURBlMWLDFVIcLRAABeGbvNsSxIkywNUNqbQGT0ASW986Bl9EUYzA+s7P4QyVgTvO4t94wVLxisCC1GF+wnBE6WCkvHgyD3iF4VW5Tk+aQrUhn4QJWUbGyHKdIYC8qbpzELEJQlsKXLMI4zyCkL0WHJZ851WRZlN5KcLKkNNEGQhSEXsD2BgCOTEm5vNsh9/gh5KjEL1bTU6K8QKQWDA5VEaYHYidNWLddyTenGo2FMAALJJMCWjCg2wxmQl48KIQeT+D2COZ3MdBJtxdL80uQZ9wGecaZNiRYjViIyvLLSF94xCCQTT/pMErsvf1JkBdP9+bQ6nA0yqbUaAAAA\') format(\'woff2\');\n}\n.dali-tree-style {\n  width: 600px;\n  height: 800px;\n  overflow: auto;\n}\n.dali-tree-style li {\n  list-style: none;\n  line-height: 30px;\n}\n.dali-tree-style li > ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  padding-left: 30px;\n}\n.dali-tree-style .base-inon {\n  font-family: "iconfont" !important;\n  font-size: 20px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin-right: 6px;\n  cursor: pointer;\n}\n.dali-tree-style .dali-expand:before {\n  content: "\\E605";\n  font-family: "iconfont" !important;\n  font-size: 20px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin-right: 6px;\n  cursor: pointer;\n}\n.dali-tree-style .dali-un-expand:before {\n  content: "\\E606";\n  font-family: "iconfont" !important;\n  font-size: 20px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin-right: 6px;\n  cursor: pointer;\n}\n.dali-tree-style .dali-un-checked:before {\n  content: "\\E608";\n  font-family: "iconfont" !important;\n  font-size: 20px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin-right: 6px;\n  cursor: pointer;\n}\n.dali-tree-style .dali-checked:before {\n  content: "\\E607";\n  font-family: "iconfont" !important;\n  font-size: 20px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin-right: 6px;\n  cursor: pointer;\n}\n',""])},function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var i=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),r=o.sources.map((function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"}));return[t].concat(r).concat([i]).join("\n")}var a;return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t})).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},i=0;i<this.length;i++){var r=this[i][0];"number"==typeof r&&(o[r]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&o[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},function(e,n,t){"use strict";t.r(n);var o,i,r,a=t(0),s=t.n(a),c={code:"e00001",msg:"当type为async时，数据接口dataInterface必须返回一个Promise对象"};!function(e){e.dali_type="dali_type",e.dali_id="dali_id"}(o||(o={})),function(e){e.root="root",e.expand="expand",e.check_box="check_box",e.node="node",e.childs="childs",e.label="label"}(i||(i={})),function(e){e.async="async",e.sync="sync"}(r||(r={}));var d,l=(d=function(e,n){return(d=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)},function(e,n){function t(){this.constructor=e}d(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),u=function(){return(u=Object.assign||function(e){for(var n,t=1,o=arguments.length;t<o;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e}).apply(this,arguments)},p=function(e,n,t,o){return new(t||(t=Promise))((function(i,r){function a(e){try{c(o.next(e))}catch(e){r(e)}}function s(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}c((o=o.apply(e,n||[])).next())}))},f=function(e,n){var t,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=n.call(e,a)}catch(e){r=[6,e],o=0}finally{t=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},h=function(e){function n(n){var t=e.call(this)||this;t.nodes=[],t.options=u({loadType:r.sync},n);var o=t.options,i=o.dataInterface,a=o.loadComplete,s=o.loadBefore;return i instanceof Function&&(t.options.dataInterface=function(e){s&&s(e);var n=i();return n&&n.then?new Promise((function(t){n.then((function(n){a&&a(e,n),t(n)}))})):n}),t.nodesMap={},t.init(),t}return l(n,e),n.prototype.init=function(){var e=this,n=this.options,t=n.dataInterface,o=n.renderDom;if(t)if(t instanceof Function){var i=t();if(i instanceof Promise)i.then((function(n){e._initNodeMap(n)}));else{var r=i;this._initNodeMap(r)}}else if(t instanceof Object){r=t;this._initNodeMap(r)}o.setAttribute("class",o.getAttribute("class")+" dali-tree-style")},n.prototype._initNodeMap=function(e){e instanceof Array||(e=[e]),this.nodes=e,this._addToNodeMap(e),this.render()},n.prototype._addToNodeMap=function(e){if(e&&e.length){var n=this;e.map((function(e){n.nodesMap[e.id]=e,n._addToNodeMap(e.childNodes)}))}},n.prototype.render=function(){var e=this.nodes,n=this.options,t=n.renderDom,o=n.renderComplete;this._renderNodes({renderId:"_rootNode",nodes:e,renderDom:t}),this._bindEvnetAgent(),o&&o(e)},n.prototype._nodeHtmlGenerator=function(e){return""+e.name},n.prototype._renderNodes=function(e){return p(this,void 0,void 0,(function(){var n,t,o;return f(this,(function(i){return n=e.nodes,t=e.renderDom,n?(o=document.createElement("div"),this._generateRenderNodes(n,o),t.appendChild(o),[2]):[2]}))}))},n.prototype._generateRenderNodes=function(e,n){return p(this,void 0,void 0,(function(){var t=this;return f(this,(function(o){return e?(e.map((function(e){t._depthLoopNode(e,n)})),[2]):[2]}))}))},n.prototype._depthLoopNode=function(e,n){return p(this,void 0,void 0,(function(){var t,a,s,d,l=this;return f(this,(function(u){return t=this.options,a=t.dataInterface,(s=document.createElement("li")).setAttribute(o.dali_id,e.id),s.setAttribute(o.dali_type,i.node),this._renderMainLabel(e,s),e.isParent&&e.expand&&(t.loadType===r.async?(d=a(e))instanceof Promise?d.then((function(n){e.childNodes=n,l._generateChildNodes(e,s)})):Log.info(c):this._generateChildNodes(e,s)),n.appendChild(s),[2]}))}))},n.prototype._generateChildNodes=function(e,n){var t=document.createElement("ul");t.setAttribute(o.dali_type,i.childs),n.appendChild(t),this._generateRenderNodes(e.childNodes,t)},n.prototype._renderMainLabel=function(e,n){this._renderExpandDom(e,n),this._renderCheckBoxDom(e,n),this._renderLabelDom(e,n)},n.prototype._expandNodesAgent=function(e){return p(this,void 0,void 0,(function(){var n,t,o,i;return f(this,(function(r){switch(r.label){case 0:return n=this.options,t=e.expandStatus,o=e.node,i=e.renderDom,!1===(n.nodeExpandBefore&&n.nodeExpandBefore(o))?[3,4]:t?[4,this._expandNodes(o,i)]:[3,2];case 1:return r.sent(),[3,3];case 2:this._unExpandNodes(o,i),r.label=3;case 3:n.nodeExpandAfter&&n.nodeExpandAfter(o),r.label=4;case 4:return[2]}}))}))},n.prototype._expandNodes=function(e,n){return p(this,void 0,void 0,(function(){var t;return f(this,(function(r){switch(r.label){case 0:return n.innerHTML="",this._renderMainLabel(e,n),(t=document.createElement("ul")).setAttribute(o.dali_type,i.childs),[4,this._renderNodes({renderId:e.id,nodes:e.childNodes,renderDom:t})];case 1:return r.sent(),n.appendChild(t),[2]}}))}))},n.prototype._unExpandNodes=function(e,n){n.innerHTML="",this._renderMainLabel(e,n)},n.prototype._renderExpandDom=function(e,n){if(e.isParent){var t=document.createElement("span"),r=e.expand?"dali-expand":"dali-un-expand";t.setAttribute(o.dali_type,i.expand),t.setAttribute("class",r),n.appendChild(t)}},n.prototype._renderLabelDom=function(e,n){var t=e.nodeHtmlGenerator||this._nodeHtmlGenerator,r=document.createElement("span");r.innerHTML=t(e),r.setAttribute(o.dali_type,i.label),n.appendChild(r)},n.prototype._renderCheckBoxDom=function(e,n){var t=document.createElement("span"),r=e.checked?"dali-checked":"dali-un-checked";t.setAttribute("id",i.check_box+"-"+e.id),t.setAttribute(o.dali_type,i.check_box),t.setAttribute("class",r),n.appendChild(t)},n.prototype._checkNode=function(e,n){var t=this;if(e instanceof Array)e.map((function(e){t._checkNode(e,n)}));else{var o=document.getElementById(i.check_box+"-"+e.id);if(e.checked=n,e.checkChilds=n,o&&o.setAttribute){var r=e.checked?"dali-checked":"dali-un-checked";o.setAttribute("class",r)}e.childNodes&&this._checkNode(e.childNodes,n)}},n.prototype._bindEvnetAgent=function(){var e=this.options.renderDom,n=this;e.addEventListener("click",(function(e){switch(e.srcElement.getAttribute(o.dali_type)){case i.expand:n._evnetTrigger_expand(e);break;case i.check_box:n._evnetTrigger_check(e);break;case i.label:n._eventTrigger_node_click(e)}})),e.addEventListener("dblclick",(function(e){switch(e.srcElement.getAttribute(o.dali_type)){case i.label:n._eventTrigger_node_dbclick(e)}}))},n.prototype._eventTrigger_node_click=function(e){var n=this._analysisEventObject(e).node;this.options.nodeClick&&this.options.nodeClick(n)},n.prototype._eventTrigger_node_dbclick=function(e){var n=this._analysisEventObject(e).node;this.options.nodeDbclick&&this.options.nodeDbclick(n)},n.prototype._evnetTrigger_expand=function(e){var n=this._analysisEventObject(e),t=n.node,o=n.nodeDom;t.expand=!t.expand,this._expandNodesAgent({expandStatus:t.expand,renderDom:o,node:t})},n.prototype._evnetTrigger_check=function(e){var n=this._analysisEventObject(e).node;!1!==(this.options.checkBefore&&this.options.checkBefore(n))&&(this._checkNode(n,!n.checked),this.options.checkAfter&&this.options.checkAfter(n))},n.prototype._analysisEventObject=function(e){var n=e.srcElement,t=n.parentNode,i=t.getAttribute(o.dali_id);return{srcElemt:n,nodeDom:t,daliId:i,node:this.nodesMap[i]}},n}(s.a);n.default=h}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,