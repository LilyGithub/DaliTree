!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DaliTree=void 0;var i,o=n(2),r=(i=o)&&i.__esModule?i:{default:i};n(3),window.DaliTree=r.default,t.DaliTree=r.default},function(e,t,n){"use strict";n.r(t);var i,o,r,a=n(0),d=n.n(a),s={code:"e00001",msg:"当type为async时，数据接口dataInterface必须返回一个Promise对象"};!function(e){e.dali_type="dali_type",e.dali_id="dali_id"}(i||(i={})),function(e){e.root="root",e.expand="expand",e.check_box="check_box",e.node="node",e.childs="childs",e.label="label",e.loading="loading"}(o||(o={})),function(e){e.async="async",e.sync="sync"}(r||(r={}));var c,l=(c=function(e,t){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}c(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(){return(u=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},h=function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{s(i.next(e))}catch(e){r(e)}}function d(e){try{s(i.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,d)}s((i=i.apply(e,t||[])).next())}))},p=function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:d(0),throw:d(1),return:d(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function d(r){return function(d){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,d])}}},f=function(e){function t(t){var n=e.call(this)||this;n.nodes=[],n.options=u({loadType:r.sync},t);var i=n.options,o=i.dataInterface,a=i.loadComplete,d=i.loadBefore;return o instanceof Function&&(n.options.dataInterface=function(e){d&&d(e);var t=o(e);return t&&t.then?new Promise((function(n){t.then((function(t){a&&a(e,t),n(t)}))})):t}),n.nodesMap={},n._checkParentsTask=null,n.init(),n}return l(t,e),t.prototype.init=function(){var e=this,t=this.options,n=t.dataInterface,i=t.renderDom;if(n)if(n instanceof Function){var o=n();if(o instanceof Promise)o.then((function(t){e._initNodeMap(t)}));else{var r=o;this._initNodeMap(r)}}else if(n instanceof Object){r=n;this._initNodeMap(r)}i.setAttribute("class",i.getAttribute("class")+" dali-tree-style")},t.prototype._initNodeMap=function(e){return h(this,void 0,void 0,(function(){return p(this,(function(t){switch(t.label){case 0:return e instanceof Array||(e=[e]),this.nodes=e,[4,this._addToNodeMap(e)];case 1:return t.sent(),this.render(),[2]}}))}))},t.prototype._addToNodeMap=function(e){return h(this,void 0,void 0,(function(){var t;return p(this,(function(n){return e&&e.length?(t=this,e.map((function(e){t.nodesMap[e.id]=e,t._addToNodeMap(e.childNodes)})),[2]):[2]}))}))},t.prototype.render=function(){var e=this.nodes,t=this.options,n=t.renderDom,i=t.renderComplete;this._renderNodes({renderId:"_rootNode",nodes:e,renderDom:n}),this._bindEvnetAgent(),i&&i(e)},t.prototype._nodeHtmlGenerator=function(e){return'<span class="dali-tree-label-name">'+e.name+'</span><span id="'+o.loading+"-"+e.id+'" class="dali-tree-displaynone dali-node-loading"></span>'},t.prototype._renderNodes=function(e){return h(this,void 0,void 0,(function(){var t,n,i;return p(this,(function(o){switch(o.label){case 0:return t=e.nodes,n=e.renderDom,t?t instanceof Array?(i=document.createElement("div"),n.appendChild(i),[4,this._generateRenderNodes(t,i)]):[3,2]:[2];case 1:return o.sent(),this._excuteCheckParentsTask(),[3,3];case 2:this._loadAndGenerateChildNodes(t,n),o.label=3;case 3:return[2]}}))}))},t.prototype._generateRenderNodes=function(e,t){return h(this,void 0,void 0,(function(){var n=this;return p(this,(function(i){return e?(e.map((function(e){n._depthLoopNode(e,t)})),[2]):[2]}))}))},t.prototype._depthLoopNode=function(e,t){return h(this,void 0,void 0,(function(){var n;return p(this,(function(r){return(n=document.createElement("li")).setAttribute("id",o.node+"-"+e.id),n.setAttribute(i.dali_id,e.id),n.setAttribute(i.dali_type,o.node),this._renderMainLabel(e,n),e.isParent&&e.expand&&this._loadAndGenerateChildNodes(e,n),t.appendChild(n),[2]}))}))},t.prototype._loadAndGenerateChildNodes=function(e,t){return h(this,void 0,void 0,(function(){var n,i,o,a=this;return p(this,(function(d){return n=this.options,i=n.dataInterface,this._renderLoading(e,!0),n.loadType!==r.async||e._hasLoadData?this._generateChildNodes(e,t):(o=i(e))instanceof Promise?o.then((function(n){e._hasLoadData=!0,e.childNodes=n,a._addToNodeMap(n),a._generateChildNodes(e,t)})):Log.info(s),[2]}))}))},t.prototype._generateChildNodes=function(e,t){return h(this,void 0,void 0,(function(){var n;return p(this,(function(r){switch(r.label){case 0:return(n=document.createElement("ul")).setAttribute(i.dali_type,o.childs),t.appendChild(n),[4,this._generateRenderNodes(e.childNodes,n)];case 1:return r.sent(),this._renderLoading(e,!1),[2]}}))}))},t.prototype._renderMainLabel=function(e,t){this._renderExpandDom(e,t),this._renderCheckBoxDom(e,t),this._renderLabelDom(e,t)},t.prototype._expandNodesAgent=function(e){return h(this,void 0,void 0,(function(){var t,n,i,o;return p(this,(function(r){switch(r.label){case 0:return t=this.options,n=e.expandStatus,i=e.node,o=e.renderDom,!1===(t.nodeExpandBefore&&t.nodeExpandBefore(i))?[3,4]:n?[4,this._expandNodes(i,o)]:[3,2];case 1:return r.sent(),[3,3];case 2:this._unExpandNodes(i,o),r.label=3;case 3:t.nodeExpandAfter&&t.nodeExpandAfter(i),r.label=4;case 4:return[2]}}))}))},t.prototype._expandNodes=function(e,t){return h(this,void 0,void 0,(function(){var n,a,d;return p(this,(function(s){switch(s.label){case 0:return n=this.options,t.innerHTML="",this._renderMainLabel(e,t),(a=document.createElement("ul")).setAttribute(i.dali_type,o.childs),d=e.childNodes,n.loadType!==r.async||e._hasLoadData||(d=e),[4,this._renderNodes({renderId:e.id,nodes:d,renderDom:a})];case 1:return s.sent(),t.appendChild(a),[2]}}))}))},t.prototype._unExpandNodes=function(e,t){t.innerHTML="",this._renderMainLabel(e,t)},t.prototype._renderExpandDom=function(e,t){if(e.isParent){var n=document.createElement("span"),r=e.expand?"dali-expand":"dali-un-expand";n.setAttribute(i.dali_type,o.expand),n.setAttribute("class",r),t.appendChild(n)}},t.prototype._renderLabelDom=function(e,t){var n=e.nodeHtmlGenerator||this._nodeHtmlGenerator,r=document.createElement("span");r.innerHTML=n(e),r.setAttribute(i.dali_type,o.label),r.setAttribute("id",o.label+"-"+e.id),t.appendChild(r)},t.prototype._renderCheckBoxDom=function(e,t){var n=document.createElement("span"),r=e.checked?"dali-checked":"dali-un-checked";n.setAttribute("id",o.check_box+"-"+e.id),n.setAttribute(i.dali_type,o.check_box),n.setAttribute("class",r),e._hasCheckChild?n.classList.add("dali-has-child-check"):n.classList.remove("dali-has-child-check"),e.checked&&this._pushCheckParentsTask(e),t.appendChild(n)},t.prototype._checkNode=function(e,t){var n=this;if(e instanceof Array)e.map((function(e){n._checkNode(e,t)}));else{var i=document.getElementById(o.check_box+"-"+e.id);if(e.checked=t,i&&i.setAttribute){var r=e.checked?"dali-checked":"dali-un-checked";i.setAttribute("class",r)}e.isParent&&(e._hasCheckChild=t,t?i.classList.add("dali-has-child-check"):i.classList.remove("dali-has-child-check"),e.childNodes&&this._checkNode(e.childNodes,t))}},t.prototype._pushCheckParentsTask=function(e){this._checkParentsTask=e},t.prototype._excuteCheckParentsTask=function(){this._checkParentsTask&&(this._checkParents(this._checkParentsTask),this._checkParentsTask=null)},t.prototype._checkParents=function(e){if(e instanceof HTMLElement){if(e){if(e.getAttribute(i.dali_type)===o.node){var t=e.childNodes,n=null,r=e.getAttribute(i.dali_id),a=this.nodesMap[r],d=!1;if(a.childNodes)for(var s=0,c=a.childNodes;s<c.length;s++){var l=c[s];(l.checked||l._hasCheckChild)&&(d=!0)}for(var u=0,h=t;u<h.length;u++){var p=h[u];if(p.getAttribute(i.dali_type)===o.check_box){n=p;break}}d?(n.classList.add("dali-has-child-check"),a._hasCheckChild=!0):(n.classList.remove("dali-has-child-check"),a._hasCheckChild=!1)}e.getAttribute(i.dali_id)!==o.root&&this._checkParents(e.parentNode)}}else{var f=document.getElementById(o.node+"-"+e.id);f&&this._checkParents(f.parentNode)}},t.prototype._renderLoading=function(e,t){var n=document.getElementById(o.label+"-"+e.id);if(n&&t)(i=document.getElementById(o.loading+"-"+e.id))&&i.classList&&i.classList.remove("dali-tree-displaynone");else if(n&&!t){var i;(i=document.getElementById(o.loading+"-"+e.id))&&i.classList&&i.classList.add("dali-tree-displaynone")}},t.prototype._bindEvnetAgent=function(){var e=this.options.renderDom,t=this;e.addEventListener("click",(function(e){switch(e.srcElement.getAttribute(i.dali_type)){case o.expand:t._evnetTrigger_expand(e);break;case o.check_box:t._evnetTrigger_check(e);break;case o.label:t._eventTrigger_node_click(e)}})),e.addEventListener("dblclick",(function(e){switch(e.srcElement.getAttribute(i.dali_type)){case o.label:t._eventTrigger_node_dbclick(e)}}))},t.prototype._eventTrigger_node_click=function(e){var t=this._analysisEventObject(e).node;this.options.nodeClick&&this.options.nodeClick(t)},t.prototype._eventTrigger_node_dbclick=function(e){var t=this._analysisEventObject(e).node;this.options.nodeDbclick&&this.options.nodeDbclick(t)},t.prototype._evnetTrigger_expand=function(e){var t=this._analysisEventObject(e),n=t.node,i=t.nodeDom;n.expand=!n.expand,this._expandNodesAgent({expandStatus:n.expand,renderDom:i,node:n})},t.prototype._evnetTrigger_check=function(e){var t=this._analysisEventObject(e).node;!1!==(this.options.checkBefore&&this.options.checkBefore(t))&&(this._checkNode(t,!t.checked),this._checkParents(t),this.options.checkAfter&&this.options.checkAfter(t))},t.prototype._analysisEventObject=function(e){var t=e.srcElement,n=t.parentNode,o=n.getAttribute(i.dali_id);return{srcElemt:t,nodeDom:n,daliId:o,node:this.nodesMap[o]}},t}(d.a);t.default=f},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGljdGlvbm5hcnkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhbGktdHJlZS1wYXJhbXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RpY3Rpb25uYXJ5L2VyckNvZGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhbGktdHJlZS50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIndpbmRvdyIsIkRhbGlUcmVlIiwiRE9NX0FUVFIiLCJET01fVFlQRSIsIkxvYWRUeXBlIiwiY29kZSIsIm1zZyIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwidiIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwicHVzaCIsIl9zdXBlciIsIm9wdGlvbnMiLCJfdGhpc18xIiwibm9kZXMiLCJsb2FkVHlwZSIsInN5bmMiLCJfYSIsImRhdGFJbnRlcmZhY2UiLCJsb2FkQ29tcGxldGUiLCJsb2FkQmVmb3JlIiwiRnVuY3Rpb24iLCJub2RlIiwibmV0QXBpIiwiZGF0YSIsIm5vZGVzTWFwIiwiX2NoZWNrUGFyZW50c1Rhc2siLCJpbml0IiwicmVuZGVyRG9tIiwibm9kZURhdGFBcGkiLCJub2RlRGF0YSIsIl9pbml0Tm9kZU1hcCIsInNldEF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsIl9hZGRUb05vZGVNYXAiLCJyZW5kZXIiLCJfdGhpcyIsIm1hcCIsImlkIiwiY2hpbGROb2RlcyIsInJlbmRlckNvbXBsZXRlIiwiX3JlbmRlck5vZGVzIiwicmVuZGVySWQiLCJfYmluZEV2bmV0QWdlbnQiLCJfbm9kZUh0bWxHZW5lcmF0b3IiLCJsb2FkaW5nIiwib3B0IiwiZmFrZURvbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiX2dlbmVyYXRlUmVuZGVyTm9kZXMiLCJfZXhjdXRlQ2hlY2tQYXJlbnRzVGFzayIsIl9sb2FkQW5kR2VuZXJhdGVDaGlsZE5vZGVzIiwiX2RlcHRoTG9vcE5vZGUiLCJjdXJyZW50RG9tIiwiZGFsaV9pZCIsImRhbGlfdHlwZSIsIl9yZW5kZXJNYWluTGFiZWwiLCJpc1BhcmVudCIsImV4cGFuZCIsImRhdGFBcGkiLCJfcmVuZGVyTG9hZGluZyIsImFzeW5jIiwiX2hhc0xvYWREYXRhIiwiX2dlbmVyYXRlQ2hpbGROb2RlcyIsIkxvZyIsImluZm8iLCJjaGlsZHNEb20iLCJjaGlsZHMiLCJfcmVuZGVyRXhwYW5kRG9tIiwiX3JlbmRlckNoZWNrQm94RG9tIiwiX3JlbmRlckxhYmVsRG9tIiwiX2V4cGFuZE5vZGVzQWdlbnQiLCJleHBhbmRTdGF0dXMiLCJub2RlRXhwYW5kQmVmb3JlIiwiX2V4cGFuZE5vZGVzIiwiX3VuRXhwYW5kTm9kZXMiLCJub2RlRXhwYW5kQWZ0ZXIiLCJyZW5kZXJOb2RlcyIsImlubmVySFRNTCIsInRhZ0RvbSIsIm5vZGVIdG1sR2VuZXJhdG9yIiwibGFiZWxEb20iLCJjaGVja0JveERvbSIsImNoZWNrZWQiLCJjaGVja19ib3giLCJfaGFzQ2hlY2tDaGlsZCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsIl9wdXNoQ2hlY2tQYXJlbnRzVGFzayIsIl9jaGVja05vZGUiLCJjaGVja1N0YXR1cyIsInNyY0VsZW10IiwiZ2V0RWxlbWVudEJ5SWQiLCJfY2hlY2tQYXJlbnRzIiwiSFRNTEVsZW1lbnQiLCJjaGxpZE5kIiwiY2hlY2tEb20iLCJkYWxpSWQiLCJzaG91bGRDaGVjayIsIl9pIiwiY25kIiwiX2IiLCJjaGxpZE5kXzEiLCJjZCIsInJvb3QiLCJwYXJlbnROb2RlIiwiZmxhZyIsIm5vZGVEb20iLCJsb2FkaW5nRG9tIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNyY0VsZW1lbnQiLCJfZXZuZXRUcmlnZ2VyX2V4cGFuZCIsIl9ldm5ldFRyaWdnZXJfY2hlY2siLCJfZXZlbnRUcmlnZ2VyX25vZGVfY2xpY2siLCJfZXZlbnRUcmlnZ2VyX25vZGVfZGJjbGljayIsIl9hbmFseXNpc0V2ZW50T2JqZWN0Iiwibm9kZUNsaWNrIiwibm9kZURiY2xpY2siLCJjaGVja0JlZm9yZSIsImNoZWNrQWZ0ZXIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxH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S0FPZGhFLEVBQVNMLFVBQVVrSyxvQkFBc0IsU0FBVTlILEdBQy9DLElBQUlpQyxFQUFPbkQsS0FBS21KLHFCQUFxQmpJLEdBQUdpQyxNQUVuQixLQURGbkQsS0FBS3lDLFFBQVE2RyxhQUFldEosS0FBS3lDLFFBQVE2RyxZQUFZbkcsTUFFcEVuRCxLQUFLeUgsV0FBV3RFLEdBQU9BLEVBQUsrRCxTQUM1QmxILEtBQUs2SCxjQUFjMUUsR0FDbkJuRCxLQUFLeUMsUUFBUThHLFlBQWN2SixLQUFLeUMsUUFBUThHLFdBQVdwRyxLQU8zRGhFLEVBQVNMLFVBQVVxSyxxQkFBdUIsU0FBVWpJLEdBQ2hELElBQUl5RyxFQUFXekcsRUFBRTRILFdBQ2JILEVBQVVoQixFQUFTYyxXQUNuQlIsRUFBU1UsRUFBUTdFLGFBQWExRSxFQUFTaUcsU0FFM0MsTUFBTyxDQUNIc0MsU0FBVUEsRUFDVmdCLFFBQVNBLEVBQ1RWLE9BQVFBLEVBQ1I5RSxLQUxPbkQsS0FBS3NELFNBQVMyRSxLQVF0QjlJLEVBcGpCa0IsQ0FxakIzQixLQUNhLGEiLCJmaWxlIjoiZGFsaXRyZWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuXHJcbiAgICB9XHJcbiAgICBcclxufSIsImltcG9ydCBEYWxpVHJlZSBmcm9tICcuL2RhbGktdHJlZS50cyc7XHJcbmltcG9ydCAnLi9za2luL2NsYXNzaWMvYmFzZS5sZXNzJztcclxud2luZG93LkRhbGlUcmVlID0gRGFsaVRyZWU7XHJcbmV4cG9ydCB7XHJcbiAgICBEYWxpVHJlZVxyXG59IiwiaW1wb3J0IEVSUl9DT0RFIGZyb20gJy4vZXJyQ29kZSc7XHJcbmV4cG9ydCB7IEVSUl9DT0RFIH07XHJcbmV4cG9ydCB2YXIgRE9NX0FUVFI7XHJcbihmdW5jdGlvbiAoRE9NX0FUVFIpIHtcclxuICAgIERPTV9BVFRSW1wiZGFsaV90eXBlXCJdID0gXCJkYWxpX3R5cGVcIjtcclxuICAgIERPTV9BVFRSW1wiZGFsaV9pZFwiXSA9IFwiZGFsaV9pZFwiO1xyXG59KShET01fQVRUUiB8fCAoRE9NX0FUVFIgPSB7fSkpO1xyXG47XHJcbmV4cG9ydCB2YXIgRE9NX1RZUEU7XHJcbihmdW5jdGlvbiAoRE9NX1RZUEUpIHtcclxuICAgIERPTV9UWVBFW1wicm9vdFwiXSA9IFwicm9vdFwiO1xyXG4gICAgRE9NX1RZUEVbXCJleHBhbmRcIl0gPSBcImV4cGFuZFwiO1xyXG4gICAgRE9NX1RZUEVbXCJjaGVja19ib3hcIl0gPSBcImNoZWNrX2JveFwiO1xyXG4gICAgRE9NX1RZUEVbXCJub2RlXCJdID0gXCJub2RlXCI7XHJcbiAgICBET01fVFlQRVtcImNoaWxkc1wiXSA9IFwiY2hpbGRzXCI7XHJcbiAgICBET01fVFlQRVtcImxhYmVsXCJdID0gXCJsYWJlbFwiO1xyXG4gICAgRE9NX1RZUEVbXCJsb2FkaW5nXCJdID0gXCJsb2FkaW5nXCI7XHJcbn0pKERPTV9UWVBFIHx8IChET01fVFlQRSA9IHt9KSk7XHJcbjtcclxuIiwiZXhwb3J0IHZhciBMb2FkVHlwZTtcclxuKGZ1bmN0aW9uIChMb2FkVHlwZSkge1xyXG4gICAgTG9hZFR5cGVbXCJhc3luY1wiXSA9IFwiYXN5bmNcIjtcclxuICAgIExvYWRUeXBlW1wic3luY1wiXSA9IFwic3luY1wiO1xyXG59KShMb2FkVHlwZSB8fCAoTG9hZFR5cGUgPSB7fSkpO1xyXG47XHJcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuICAgIE5FRURfUFJPTUlTRToge1xyXG4gICAgICAgIGNvZGU6ICdlMDAwMDEnLFxyXG4gICAgICAgIG1zZzogJ+W9k3R5cGXkuLphc3luY+aXtu+8jOaVsOaNruaOpeWPo2RhdGFJbnRlcmZhY2Xlv4Xpobvov5Tlm57kuIDkuKpQcm9taXNl5a+56LGhJ1xyXG4gICAgfVxyXG59O1xyXG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuaW1wb3J0IEV2ZW50IGZyb20gJy4vZXZlbnQnO1xyXG5pbXBvcnQgeyBFUlJfQ09ERSwgRE9NX0FUVFIsIERPTV9UWVBFIH0gZnJvbSAnLi9kaWN0aW9ubmFyeS9pbmRleCc7XHJcbmltcG9ydCB7IExvYWRUeXBlIH0gZnJvbSAnLi9kYWxpLXRyZWUtcGFyYW1zJztcclxudmFyIERhbGlUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKERhbGlUcmVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRGFsaVRyZWUob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpc18xID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpc18xLm5vZGVzID0gW107XHJcbiAgICAgICAgX3RoaXNfMS5vcHRpb25zID0gX19hc3NpZ24oeyBsb2FkVHlwZTogTG9hZFR5cGUuc3luYyB9LCBvcHRpb25zKTtcclxuICAgICAgICB2YXIgX2EgPSBfdGhpc18xLm9wdGlvbnMsIGRhdGFJbnRlcmZhY2UgPSBfYS5kYXRhSW50ZXJmYWNlLCBsb2FkQ29tcGxldGUgPSBfYS5sb2FkQ29tcGxldGUsIGxvYWRCZWZvcmUgPSBfYS5sb2FkQmVmb3JlO1xyXG4gICAgICAgIGlmIChkYXRhSW50ZXJmYWNlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgX3RoaXNfMS5vcHRpb25zLmRhdGFJbnRlcmZhY2UgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbG9hZEJlZm9yZSAmJiBsb2FkQmVmb3JlKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ldEFwaSA9IGRhdGFJbnRlcmZhY2Uobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV0QXBpICYmIG5ldEFwaS50aGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldEFwaS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkQ29tcGxldGUgJiYgbG9hZENvbXBsZXRlKG5vZGUsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV0QXBpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBfdGhpc18xLm5vZGVzTWFwID0ge307XHJcbiAgICAgICAgX3RoaXNfMS5fY2hlY2tQYXJlbnRzVGFzayA9IG51bGw7XHJcbiAgICAgICAgX3RoaXNfMS5pbml0KCk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzXzE7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiDmoJHliJ3lp4vljJZcclxuICAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIHZhciBfYSA9IHRoaXMub3B0aW9ucywgZGF0YUludGVyZmFjZSA9IF9hLmRhdGFJbnRlcmZhY2UsIHJlbmRlckRvbSA9IF9hLnJlbmRlckRvbTtcclxuICAgICAgICAvL+WIneWni+WMluiKgueCueaVsOaNrlxyXG4gICAgICAgIGlmIChkYXRhSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhSW50ZXJmYWNlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBub2RlRGF0YUFwaSA9IGRhdGFJbnRlcmZhY2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlRGF0YUFwaSBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlRGF0YUFwaS50aGVuKGZ1bmN0aW9uIChub2RlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpc18xLl9pbml0Tm9kZU1hcChub2RlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZURhdGEgPSBub2RlRGF0YUFwaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0Tm9kZU1hcChub2RlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YUludGVyZmFjZSBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVEYXRhID0gZGF0YUludGVyZmFjZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luaXROb2RlTWFwKG5vZGVEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvL+WIneWni+WMluagueiKgueCueWxnuaAp1xyXG4gICAgICAgIHJlbmRlckRvbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgcmVuZGVyRG9tLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSArICcgZGFsaS10cmVlLXN0eWxlJyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24g5Yid5aeL5YyWbm9kZW1hcCzkvr/kuo7lkI7nu63oioLngrnmn6Xmib7pgJ/luqZcclxuICAgICAqIEBwYXJhbSB7fSBub2RlRGF0YSDoioLngrnmnoTpgKBPYmplY3RcclxuICAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9pbml0Tm9kZU1hcCA9IGZ1bmN0aW9uIChub2RlRGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobm9kZURhdGEgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEYXRhID0gW25vZGVEYXRhXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVzID0gbm9kZURhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX2FkZFRvTm9kZU1hcChub2RlRGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOaKim5vZGVz5re75Yqg5Yiwbm9kZU1hcOS4rVxyXG4gICAgICogQHBhcmFtIHsqfSBub2Rlc1xyXG4gICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUuX2FkZFRvTm9kZU1hcCA9IGZ1bmN0aW9uIChub2Rlcykge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGVzIHx8ICFub2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBub2Rlcy5tYXAoZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ub2Rlc01hcFtuLmlkXSA9IG47XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2FkZFRvTm9kZU1hcChuLmNoaWxkTm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOagkea4suafk1xyXG4gICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYSA9IHRoaXMsIG5vZGVzID0gX2Eubm9kZXMsIG9wdGlvbnMgPSBfYS5vcHRpb25zO1xyXG4gICAgICAgIHZhciByZW5kZXJEb20gPSBvcHRpb25zLnJlbmRlckRvbSwgcmVuZGVyQ29tcGxldGUgPSBvcHRpb25zLnJlbmRlckNvbXBsZXRlO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlck5vZGVzKHtcclxuICAgICAgICAgICAgcmVuZGVySWQ6ICdfcm9vdE5vZGUnLFxyXG4gICAgICAgICAgICBub2Rlczogbm9kZXMsXHJcbiAgICAgICAgICAgIHJlbmRlckRvbTogcmVuZGVyRG9tXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYmluZEV2bmV0QWdlbnQoKTtcclxuICAgICAgICAvL3JlbmRlciBjb21wbGV0ZVxyXG4gICAgICAgIHJlbmRlckNvbXBsZXRlICYmIHJlbmRlckNvbXBsZXRlKG5vZGVzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiDpu5jorqTnmoToioLngrlub2Rl6IqC54K55qCH562+55Sf5oiQ5ZmoXHJcbiAgICAgKiBAcGFyYW0geyp9IG5vZGVcclxuICAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9ub2RlSHRtbEdlbmVyYXRvciA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiPHNwYW4gY2xhc3M9XFxcImRhbGktdHJlZS1sYWJlbC1uYW1lXFxcIj5cIiArIG5vZGUubmFtZSArIFwiPC9zcGFuPjxzcGFuIGlkPVxcXCJcIiArIERPTV9UWVBFLmxvYWRpbmcgKyBcIi1cIiArIG5vZGUuaWQgKyBcIlxcXCIgY2xhc3M9XFxcImRhbGktdHJlZS1kaXNwbGF5bm9uZSBkYWxpLW5vZGUtbG9hZGluZ1xcXCI+PC9zcGFuPlwiO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOa4suafk+agkeiKgueCuVxyXG4gICAgICogQHBhcmFtIHsqfSBvcHRcclxuICAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9yZW5kZXJOb2RlcyA9IGZ1bmN0aW9uIChvcHQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlcywgcmVuZGVyRG9tLCBmYWtlRG9tO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlcyA9IG9wdC5ub2RlcywgcmVuZGVyRG9tID0gb3B0LnJlbmRlckRvbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG5vZGVzIGluc3RhbmNlb2YgQXJyYXkpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFrZURvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJEb20uYXBwZW5kQ2hpbGQoZmFrZURvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX2dlbmVyYXRlUmVuZGVyTm9kZXMobm9kZXMsIGZha2VEb20pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhjdXRlQ2hlY2tQYXJlbnRzVGFzaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRBbmRHZW5lcmF0ZUNoaWxkTm9kZXMobm9kZXMsIHJlbmRlckRvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24g5riy5p+T5Yiw5Li05pe2ZG9t77yM5LiA5qyh5oCn5riy5p+T5Yiw55yf5a6eZG9t77yM5YeP5bCR5rWP6KeI5Zmo6YeN5o6S6YeN57uY5qyh5pWwXHJcbiAgICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fZ2VuZXJhdGVSZW5kZXJOb2RlcyA9IGZ1bmN0aW9uIChub2RlcywgcmVuZGVyRG9tKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbm9kZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBub2Rlcy5tYXAoZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpc18xLl9kZXB0aExvb3BOb2RlKG4sIHJlbmRlckRvbSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLypcclxuICAgICog5rex5bqm5LyY5YWI6YGN5Y6G5riy5p+Tbm9kZVxyXG4gICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fZGVwdGhMb29wTm9kZSA9IGZ1bmN0aW9uIChub2RlLCByZW5kZXJEb20pIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50RG9tO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnREb20uc2V0QXR0cmlidXRlKCdpZCcsIERPTV9UWVBFLm5vZGUgKyBcIi1cIiArIG5vZGUuaWQpO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudERvbS5zZXRBdHRyaWJ1dGUoRE9NX0FUVFIuZGFsaV9pZCwgbm9kZS5pZCk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RG9tLnNldEF0dHJpYnV0ZShET01fQVRUUi5kYWxpX3R5cGUsIERPTV9UWVBFLm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgLy/muLLmn5NsYWJlbFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyTWFpbkxhYmVsKG5vZGUsIGN1cnJlbnREb20pO1xyXG4gICAgICAgICAgICAgICAgLy/muLLmn5PliLDlvZPliY3oioLngrlcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmlzUGFyZW50ICYmIG5vZGUuZXhwYW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZEFuZEdlbmVyYXRlQ2hpbGROb2Rlcyhub2RlLCBjdXJyZW50RG9tKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8v5riy5p+T5Yiw5qC56IqC54K5XHJcbiAgICAgICAgICAgICAgICByZW5kZXJEb20uYXBwZW5kQ2hpbGQoY3VycmVudERvbSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOafpeivouW5tueUn+aIkOWtkOiKgueCuVxyXG4gICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUuX2xvYWRBbmRHZW5lcmF0ZUNoaWxkTm9kZXMgPSBmdW5jdGlvbiAobm9kZSwgcmVuZGVyRG9tKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucywgZGF0YUludGVyZmFjZSwgZGF0YUFwaTtcclxuICAgICAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgZGF0YUludGVyZmFjZSA9IG9wdGlvbnMuZGF0YUludGVyZmFjZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlckxvYWRpbmcobm9kZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5sb2FkVHlwZSA9PT0gTG9hZFR5cGUuYXN5bmMgJiYgIW5vZGUuX2hhc0xvYWREYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YUFwaSA9IGRhdGFJbnRlcmZhY2Uobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFBcGkgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFBcGkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5faGFzTG9hZERhdGEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZE5vZGVzID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzXzEuX2FkZFRvTm9kZU1hcChkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzXzEuX2dlbmVyYXRlQ2hpbGROb2Rlcyhub2RlLCByZW5kZXJEb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKEVSUl9DT0RFLk5FRURfUFJPTUlTRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2VuZXJhdGVDaGlsZE5vZGVzKG5vZGUsIHJlbmRlckRvbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQg55Sf5Lqn5a2p5a2Q6IqC54K5XHJcbiAgICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fZ2VuZXJhdGVDaGlsZE5vZGVzID0gZnVuY3Rpb24gKG5vZGUsIGN1cnJlbnREb20pIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZHNEb207XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkc0RvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkc0RvbS5zZXRBdHRyaWJ1dGUoRE9NX0FUVFIuZGFsaV90eXBlLCBET01fVFlQRS5jaGlsZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RG9tLmFwcGVuZENoaWxkKGNoaWxkc0RvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX2dlbmVyYXRlUmVuZGVyTm9kZXMobm9kZS5jaGlsZE5vZGVzLCBjaGlsZHNEb20pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyTG9hZGluZyhub2RlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLypcclxuICAgICog6YCJ5Lit5q+P5Liqbm9kZeeahGxhYmVs6YOo5YiG5YyF5ous5omA5pyJ5oyJ6ZKuXHJcbiAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9yZW5kZXJNYWluTGFiZWwgPSBmdW5jdGlvbiAobm9kZSwgcmVuZGVyRG9tKSB7XHJcbiAgICAgICAgLy/nvKnlsZXmjInpkq5cclxuICAgICAgICB0aGlzLl9yZW5kZXJFeHBhbmREb20obm9kZSwgcmVuZGVyRG9tKTtcclxuICAgICAgICAvL+a4suafk2NoZWNrYm94XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyQ2hlY2tCb3hEb20obm9kZSwgcmVuZGVyRG9tKTtcclxuICAgICAgICAvL+a4suafk2xhYmVsXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyTGFiZWxEb20obm9kZSwgcmVuZGVyRG9tKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbm9kZVxyXG4gICAgICogQHBhcmFtIHJlbmRlckRvbVxyXG4gICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUuX2V4cGFuZE5vZGVzQWdlbnQgPSBmdW5jdGlvbiAob3B0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucywgZXhwYW5kU3RhdHVzLCBub2RlLCByZW5kZXJEb20sIHJldHVyblN0YXR1cztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kU3RhdHVzID0gb3B0LmV4cGFuZFN0YXR1cywgbm9kZSA9IG9wdC5ub2RlLCByZW5kZXJEb20gPSBvcHQucmVuZGVyRG9tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5TdGF0dXMgPSBvcHRpb25zLm5vZGVFeHBhbmRCZWZvcmUgJiYgb3B0aW9ucy5ub2RlRXhwYW5kQmVmb3JlKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXR1cm5TdGF0dXMgIT09IGZhbHNlKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXhwYW5kU3RhdHVzKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5fZXhwYW5kTm9kZXMobm9kZSwgcmVuZGVyRG9tKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5FeHBhbmROb2Rlcyhub2RlLCByZW5kZXJEb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm5vZGVFeHBhbmRBZnRlciAmJiBvcHRpb25zLm5vZGVFeHBhbmRBZnRlcihub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKlxyXG4gICAgKiAg5bGV5byA6IqC54K5XHJcbiAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9leHBhbmROb2RlcyA9IGZ1bmN0aW9uIChub2RlLCByZW5kZXJEb20pIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zLCBjaGlsZHNEb20sIHJlbmRlck5vZGVzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJEb20uaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlck1haW5MYWJlbChub2RlLCByZW5kZXJEb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHNEb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHNEb20uc2V0QXR0cmlidXRlKERPTV9BVFRSLmRhbGlfdHlwZSwgRE9NX1RZUEUuY2hpbGRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyTm9kZXMgPSBub2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5byC5q2l5Yqg6L295pe277yM5pyq5Yqg6L295pWw5o2u77yM5riy5p+T5pys6IqC54K5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmxvYWRUeXBlID09PSBMb2FkVHlwZS5hc3luYyAmJiAhbm9kZS5faGFzTG9hZERhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlck5vZGVzID0gbm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLl9yZW5kZXJOb2Rlcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySWQ6IG5vZGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXM6IHJlbmRlck5vZGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckRvbTogY2hpbGRzRG9tXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckRvbS5hcHBlbmRDaGlsZChjaGlsZHNEb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qXHJcbiAgICAqICDmlLbotbfoioLngrlcclxuICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUuX3VuRXhwYW5kTm9kZXMgPSBmdW5jdGlvbiAobm9kZSwgcmVuZGVyRG9tKSB7XHJcbiAgICAgICAgcmVuZGVyRG9tLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIC8v57yp5bGV5oyJ6ZKuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyTWFpbkxhYmVsKG5vZGUsIHJlbmRlckRvbSk7XHJcbiAgICB9O1xyXG4gICAgLypcclxuICAgICogIOa4suafk+e8qeWxleaMiemSrlxyXG4gICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fcmVuZGVyRXhwYW5kRG9tID0gZnVuY3Rpb24gKG5vZGUsIHJlbmRlckRvbSkge1xyXG4gICAgICAgIGlmIChub2RlLmlzUGFyZW50KSB7XHJcbiAgICAgICAgICAgIHZhciB0YWdEb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgIHZhciB0ID0gbm9kZS5leHBhbmQgPyAnZGFsaS1leHBhbmQnIDogJ2RhbGktdW4tZXhwYW5kJztcclxuICAgICAgICAgICAgdGFnRG9tLnNldEF0dHJpYnV0ZShET01fQVRUUi5kYWxpX3R5cGUsIERPTV9UWVBFLmV4cGFuZCk7XHJcbiAgICAgICAgICAgIHRhZ0RvbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdCk7XHJcbiAgICAgICAgICAgIC8vdGFnRG9tLmlubmVyVGV4dCA9IHQ7XHJcbiAgICAgICAgICAgIHJlbmRlckRvbS5hcHBlbmRDaGlsZCh0YWdEb20pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKlxyXG4gICAgKiAg5riy5p+TbGFiZWxcclxuICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUuX3JlbmRlckxhYmVsRG9tID0gZnVuY3Rpb24gKG5vZGUsIHJlbmRlckRvbSkge1xyXG4gICAgICAgIHZhciBub2RlSHRtbEdlbmVyYXRvciA9IG5vZGUubm9kZUh0bWxHZW5lcmF0b3IgfHwgdGhpcy5fbm9kZUh0bWxHZW5lcmF0b3I7XHJcbiAgICAgICAgdmFyIGxhYmVsRG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIGxhYmVsRG9tLmlubmVySFRNTCA9IG5vZGVIdG1sR2VuZXJhdG9yKG5vZGUpO1xyXG4gICAgICAgIGxhYmVsRG9tLnNldEF0dHJpYnV0ZShET01fQVRUUi5kYWxpX3R5cGUsIERPTV9UWVBFLmxhYmVsKTtcclxuICAgICAgICBsYWJlbERvbS5zZXRBdHRyaWJ1dGUoJ2lkJywgRE9NX1RZUEUubGFiZWwgKyBcIi1cIiArIG5vZGUuaWQpO1xyXG4gICAgICAgIHJlbmRlckRvbS5hcHBlbmRDaGlsZChsYWJlbERvbSk7XHJcbiAgICB9O1xyXG4gICAgLypcclxuICAgKiAg5riy5p+TY2hlY2tib3joioLngrlcclxuICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fcmVuZGVyQ2hlY2tCb3hEb20gPSBmdW5jdGlvbiAobm9kZSwgcmVuZGVyRG9tKSB7XHJcbiAgICAgICAgdmFyIGNoZWNrQm94RG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIHZhciB0ID0gbm9kZS5jaGVja2VkID8gJ2RhbGktY2hlY2tlZCcgOiAnZGFsaS11bi1jaGVja2VkJztcclxuICAgICAgICBjaGVja0JveERvbS5zZXRBdHRyaWJ1dGUoJ2lkJywgRE9NX1RZUEUuY2hlY2tfYm94ICsgXCItXCIgKyBub2RlLmlkKTtcclxuICAgICAgICBjaGVja0JveERvbS5zZXRBdHRyaWJ1dGUoRE9NX0FUVFIuZGFsaV90eXBlLCBET01fVFlQRS5jaGVja19ib3gpO1xyXG4gICAgICAgIGNoZWNrQm94RG9tLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0KTtcclxuICAgICAgICBpZiAobm9kZS5faGFzQ2hlY2tDaGlsZCkge1xyXG4gICAgICAgICAgICBjaGVja0JveERvbS5jbGFzc0xpc3QuYWRkKCdkYWxpLWhhcy1jaGlsZC1jaGVjaycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2hlY2tCb3hEb20uY2xhc3NMaXN0LnJlbW92ZSgnZGFsaS1oYXMtY2hpbGQtY2hlY2snKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbm9kZS5jaGVja2VkICYmIHRoaXMuX3B1c2hDaGVja1BhcmVudHNUYXNrKG5vZGUpO1xyXG4gICAgICAgIC8vdGFnRG9tLmlubmVyVGV4dCA9IHQ7XHJcbiAgICAgICAgcmVuZGVyRG9tLmFwcGVuZENoaWxkKGNoZWNrQm94RG9tKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIGNoZWNrIGNoaWxkXHJcbiAgICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fY2hlY2tOb2RlID0gZnVuY3Rpb24gKG5vZGUsIGNoZWNrU3RhdHVzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgbm9kZS5tYXAoZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICAgICAgICAgIF90aGlzXzEuX2NoZWNrTm9kZShuLCBjaGVja1N0YXR1cyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHNyY0VsZW10ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoRE9NX1RZUEUuY2hlY2tfYm94ICsgXCItXCIgKyBub2RlLmlkKTtcclxuICAgICAgICAgICAgbm9kZS5jaGVja2VkID0gY2hlY2tTdGF0dXM7XHJcbiAgICAgICAgICAgIGlmIChzcmNFbGVtdCAmJiBzcmNFbGVtdC5zZXRBdHRyaWJ1dGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ID0gbm9kZS5jaGVja2VkID8gJ2RhbGktY2hlY2tlZCcgOiAnZGFsaS11bi1jaGVja2VkJztcclxuICAgICAgICAgICAgICAgIHNyY0VsZW10LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobm9kZS5pc1BhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5faGFzQ2hlY2tDaGlsZCA9IGNoZWNrU3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3JjRWxlbXQuY2xhc3NMaXN0LmFkZCgnZGFsaS1oYXMtY2hpbGQtY2hlY2snKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyY0VsZW10LmNsYXNzTGlzdC5yZW1vdmUoJ2RhbGktaGFzLWNoaWxkLWNoZWNrJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBub2RlLmNoaWxkTm9kZXMgJiYgdGhpcy5fY2hlY2tOb2RlKG5vZGUuY2hpbGROb2RlcywgY2hlY2tTdGF0dXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOaPkOS6pOajgOafpeeItuiKgueCueS7u+WKoVxyXG4gICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUuX3B1c2hDaGVja1BhcmVudHNUYXNrID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICB0aGlzLl9jaGVja1BhcmVudHNUYXNrID0gbm9kZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiDmiafooYzmo4Dmn6XniLboioLngrnku7vliqFcclxuICAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9leGN1dGVDaGVja1BhcmVudHNUYXNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jaGVja1BhcmVudHNUYXNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUGFyZW50cyh0aGlzLl9jaGVja1BhcmVudHNUYXNrKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXJlbnRzVGFzayA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9jaGVja1BhcmVudHMgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwVHlwZSA9IG5vZGUuZ2V0QXR0cmlidXRlKERPTV9BVFRSLmRhbGlfdHlwZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocFR5cGUgPT09IERPTV9UWVBFLm5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hsaWROZCA9IG5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tEb20gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYWxpSWQgPSBub2RlLmdldEF0dHJpYnV0ZShET01fQVRUUi5kYWxpX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZURhdGEgPSB0aGlzLm5vZGVzTWFwW2RhbGlJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNob3VsZENoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVEYXRhLmNoaWxkTm9kZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IG5vZGVEYXRhLmNoaWxkTm9kZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY25kID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNuZC5jaGVja2VkIHx8IGNuZC5faGFzQ2hlY2tDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZENoZWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIGNobGlkTmRfMSA9IGNobGlkTmQ7IF9iIDwgY2hsaWROZF8xLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2QgPSBjaGxpZE5kXzFbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2RUeXBlID0gY2QuZ2V0QXR0cmlidXRlKERPTV9BVFRSLmRhbGlfdHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZFR5cGUgPT09IERPTV9UWVBFLmNoZWNrX2JveCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tEb20gPSBjZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRDaGVjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja0RvbS5jbGFzc0xpc3QuYWRkKCdkYWxpLWhhcy1jaGlsZC1jaGVjaycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGF0YS5faGFzQ2hlY2tDaGlsZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja0RvbS5jbGFzc0xpc3QucmVtb3ZlKCdkYWxpLWhhcy1jaGlsZC1jaGVjaycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGF0YS5faGFzQ2hlY2tDaGlsZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZShET01fQVRUUi5kYWxpX2lkKSAhPT0gRE9NX1RZUEUucm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGFyZW50cyhub2RlLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc3JjRWxlbXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChET01fVFlQRS5ub2RlICsgXCItXCIgKyBub2RlLmlkKTtcclxuICAgICAgICAgICAgc3JjRWxlbXQgJiYgdGhpcy5fY2hlY2tQYXJlbnRzKHNyY0VsZW10LnBhcmVudE5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiByZW5kZXLoioLngrlsb2FkaW5n5pWI5p6cXHJcbiAgICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fcmVuZGVyTG9hZGluZyA9IGZ1bmN0aW9uIChub2RlLCBmbGFnKSB7XHJcbiAgICAgICAgdmFyIG5vZGVEb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChET01fVFlQRS5sYWJlbCArIFwiLVwiICsgbm9kZS5pZCk7XHJcbiAgICAgICAgaWYgKG5vZGVEb20gJiYgZmxhZykge1xyXG4gICAgICAgICAgICB2YXIgbG9hZGluZ0RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKERPTV9UWVBFLmxvYWRpbmcgKyBcIi1cIiArIG5vZGUuaWQpO1xyXG4gICAgICAgICAgICBsb2FkaW5nRG9tICYmIGxvYWRpbmdEb20uY2xhc3NMaXN0ICYmIGxvYWRpbmdEb20uY2xhc3NMaXN0LnJlbW92ZSgnZGFsaS10cmVlLWRpc3BsYXlub25lJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG5vZGVEb20gJiYgIWZsYWcpIHtcclxuICAgICAgICAgICAgdmFyIGxvYWRpbmdEb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChET01fVFlQRS5sb2FkaW5nICsgXCItXCIgKyBub2RlLmlkKTtcclxuICAgICAgICAgICAgbG9hZGluZ0RvbSAmJiBsb2FkaW5nRG9tLmNsYXNzTGlzdCAmJiBsb2FkaW5nRG9tLmNsYXNzTGlzdC5hZGQoJ2RhbGktdHJlZS1kaXNwbGF5bm9uZScpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqZXZlbnQqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOS6i+S7tuS7o+eQhlxyXG4gICAgICogQHBhcmFtIHsqfSBlXHJcbiAgICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fYmluZEV2bmV0QWdlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlbmRlckRvbSA9IHRoaXMub3B0aW9ucy5yZW5kZXJEb207XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZW5kZXJEb20uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBzcmNFbGVtdCA9IGUuc3JjRWxlbWVudDtcclxuICAgICAgICAgICAgdmFyIGRhbGlUeXBlID0gc3JjRWxlbXQuZ2V0QXR0cmlidXRlKERPTV9BVFRSLmRhbGlfdHlwZSk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZGFsaVR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRE9NX1RZUEUuZXhwYW5kOlxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldm5ldFRyaWdnZXJfZXhwYW5kKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBET01fVFlQRS5jaGVja19ib3g6XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2V2bmV0VHJpZ2dlcl9jaGVjayhlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRE9NX1RZUEUubGFiZWw6XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2V2ZW50VHJpZ2dlcl9ub2RlX2NsaWNrKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVuZGVyRG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgc3JjRWxlbXQgPSBlLnNyY0VsZW1lbnQ7XHJcbiAgICAgICAgICAgIHZhciBkYWxpVHlwZSA9IHNyY0VsZW10LmdldEF0dHJpYnV0ZShET01fQVRUUi5kYWxpX3R5cGUpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGRhbGlUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIERPTV9UWVBFLmxhYmVsOlxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudFRyaWdnZXJfbm9kZV9kYmNsaWNrKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24g54K55Ye75LqL5Lu2IOiKgueCueeCueWHu+S6i+S7tlxyXG4gICAgICogQHBhcmFtIHsqfSBlXHJcbiAgICAgKi9cclxuICAgIERhbGlUcmVlLnByb3RvdHlwZS5fZXZlbnRUcmlnZ2VyX25vZGVfY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fYW5hbHlzaXNFdmVudE9iamVjdChlKS5ub2RlO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5ub2RlQ2xpY2sgJiYgdGhpcy5vcHRpb25zLm5vZGVDbGljayhub2RlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiDngrnlh7vkuovku7Yg6IqC54K55Y+M5Ye75LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0geyp9IGVcclxuICAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9ldmVudFRyaWdnZXJfbm9kZV9kYmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuX2FuYWx5c2lzRXZlbnRPYmplY3QoZSkubm9kZTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMubm9kZURiY2xpY2sgJiYgdGhpcy5vcHRpb25zLm5vZGVEYmNsaWNrKG5vZGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOeCueWHu+S6i+S7tiDngrnlh7vlsZXlvIDmlLbotbfmjInpkq5cclxuICAgICAqIEBwYXJhbSB7Kn0gZVxyXG4gICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUuX2V2bmV0VHJpZ2dlcl9leHBhbmQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBfYSA9IHRoaXMuX2FuYWx5c2lzRXZlbnRPYmplY3QoZSksIG5vZGUgPSBfYS5ub2RlLCBub2RlRG9tID0gX2Eubm9kZURvbTtcclxuICAgICAgICBub2RlLmV4cGFuZCA9ICFub2RlLmV4cGFuZDtcclxuICAgICAgICB0aGlzLl9leHBhbmROb2Rlc0FnZW50KHtcclxuICAgICAgICAgICAgZXhwYW5kU3RhdHVzOiBub2RlLmV4cGFuZCxcclxuICAgICAgICAgICAgcmVuZGVyRG9tOiBub2RlRG9tLFxyXG4gICAgICAgICAgICBub2RlOiBub2RlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAqIEBkZXNjcmlwdGlvbiDngrnlh7vkuovku7Yg54K55Ye7Y2hlY2vmoYZcclxuICAgICogQHBhcmFtIHsqfSBlXHJcbiAgICAqL1xyXG4gICAgRGFsaVRyZWUucHJvdG90eXBlLl9ldm5ldFRyaWdnZXJfY2hlY2sgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fYW5hbHlzaXNFdmVudE9iamVjdChlKS5ub2RlO1xyXG4gICAgICAgIHZhciByZXRydW5TdGF0dXMgPSB0aGlzLm9wdGlvbnMuY2hlY2tCZWZvcmUgJiYgdGhpcy5vcHRpb25zLmNoZWNrQmVmb3JlKG5vZGUpO1xyXG4gICAgICAgIGlmIChyZXRydW5TdGF0dXMgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrTm9kZShub2RlLCAhbm9kZS5jaGVja2VkKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXJlbnRzKG5vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY2hlY2tBZnRlciAmJiB0aGlzLm9wdGlvbnMuY2hlY2tBZnRlcihub2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24g6Kej5p6Q5LqL5Lu25a+56LGhZe+8jOiOt+WPluWIsOS6i+S7tuiKgueCueWvueixoW5vZGUs55uu5qCH6IqC54K5562JXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBEYWxpVHJlZS5wcm90b3R5cGUuX2FuYWx5c2lzRXZlbnRPYmplY3QgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBzcmNFbGVtdCA9IGUuc3JjRWxlbWVudDtcclxuICAgICAgICB2YXIgbm9kZURvbSA9IHNyY0VsZW10LnBhcmVudE5vZGU7XHJcbiAgICAgICAgdmFyIGRhbGlJZCA9IG5vZGVEb20uZ2V0QXR0cmlidXRlKERPTV9BVFRSLmRhbGlfaWQpO1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2Rlc01hcFtkYWxpSWRdO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNyY0VsZW10OiBzcmNFbGVtdCxcclxuICAgICAgICAgICAgbm9kZURvbTogbm9kZURvbSxcclxuICAgICAgICAgICAgZGFsaUlkOiBkYWxpSWQsXHJcbiAgICAgICAgICAgIG5vZGU6IG5vZGVcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEYWxpVHJlZTtcclxufShFdmVudCkpO1xyXG5leHBvcnQgZGVmYXVsdCBEYWxpVHJlZTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==